name: PR automation
on:
  pull_request:
    types: [labeled, unlabeled]

jobs:
  job:
    runs-on: ubuntu-latest
    steps:
      - name: retrieve label
        run: |
          jq '.' $GITHUB_EVENT_PATH
          LABEL_NAME1=$(jq --raw-output ".label.name" $GITHUB_EVENT_PATH)
          echo "Label in action is $LABEL_NAME1"
          echo ::set-env name=LABEL_NAME::$LABEL_NAME1

      - name: retrieve card
        uses: octokit/graphql-action@v2.x
        id: retrieve_card
        with:
          query: |
            query  get_project_name($owner:String!, $repo:String!, $number:Int!) {
              repository(owner:$owner,name:$repo) {
                  pullRequest(number: $number) {
                    projectCards(first: 1) {
                      nodes {
                        id
                        column {
                          id
                          name
                        }
                        project {
                          name
                        }
                      }
                    }
                  }
                }
              }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          number: ${{ github.event.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: isolate project id
        run: |
          TARGET_PROJECT_ID="${{ fromJson(steps.retrieve_card.outputs.data).repository.pullRequest.projectCards.nodes[0].project.name }}"
          echo ::set-env name=TARGET_PROJECT_ID::$TARGET_PROJECT_ID
          echo 'card data: ${{ steps.retrieve_card.outputs.data }}'
          echo "TARGET_PROJECT_ID=$TARGET_PROJECT_ID"

      - name: get project column ids
        if: env.TARGET_PROJECT_ID != ''
        uses: octokit/graphql-action@v2.x
        id: column_ids
        with:
          query: |
            query {
              repository(owner: "${{ github.event.repository.owner.login }}", name: "${{ github.event.repository.name }}") {
                  projects(first: 1, search: "${{ env.TARGET_PROJECT_ID }}") {
                    nodes {
                      id
                      name
                      columns(first:50) {
                        nodes {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: review columns ids
        if: env.TARGET_PROJECT_ID != ''
        run: "echo 'card data: ${{ steps.column_ids.outputs.data }}'"

      - name: labeled isolate target column id
        if: env.LABEL_NAME == 'Passed' && github.event.action == 'labeled' && env.TARGET_PROJECT_ID != ''
        run: |
          echo "${{ steps.column_ids.outputs.data }}"
          # echo "${{ fromJson(steps.column_ids.outputs.data).repository.projects.nodes[0].columns }}"
          
          # TARGET_COLUMN_ID=echo "${{ fromJson(steps.column_ids.outputs.data).columns }}" | jq '.repository.projects.nodes[0].columns | .[] | .[] | select(.name == "Approved for Merging") | .id'
          # echo ::set-env name=TARGET_COLUMN_ID::$TARGET_COLUMN_ID

      # - name: labeled move card
      #   if: env.LABEL_NAME == 'Passed' && github.event.action == 'labeled' && env.TARGET_PROJECT_ID != ''
      #   uses: octokit/graphql-action@v2.x
      #   with:
      #     query: |
      #       mutation {
      #         moveProjectCard(input: {
      #           cardId: "${{ fromJson(steps.retrieve_card.outputs.data).column.id }}",
      #           columnId: $TARGET_COLUMN_ID,
      #           afterCardId: null
      #         })
      #       }
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #
      # - name: unlabeled isolate target column id
      #   if: env.LABEL_NAME == 'Passed' && github.event.action == 'unlabeled' && env.TARGET_PROJECT_ID != ''
      #   run: |
      #     TARGET_COLUMN_ID=echo "${{ fromJson(steps.column_ids.outputs.data).columns }}" | jq '.repository.projects.nodes[0].columns | .[] | .[] | select(.name == "In Review") | .id'
      #     echo ::set-env name=TARGET_COLUMN_ID::$TARGET_COLUMN_ID
      #
      # - name: unlabeled move card
      #   if: env.LABEL_NAME == 'Passed' && github.event.action == 'unlabeled' && env.TARGET_PROJECT_ID != ''
      #   uses: octokit/graphql-action@v2.x
      #   with:
      #     query: |
      #       mutation {
      #         moveProjectCard(input: {
      #           cardId: "${{ fromJson(steps.retrieve_card.outputs.data).column.id }}",
      #           columnId: $TARGET_COLUMN_ID,
      #           afterCardId: null
      #         })
      #       }
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
